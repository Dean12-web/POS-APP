<script src="/javascripts/jquery.min.js"></script>
<script src="/javascripts/Chart.min.js"></script>
<script>
    $(document).ready(() => {
        lineChart()
        doughnutChart()
        csvReport()
    })
    const csvReport = function () {
        // Get the generate report button element
        const generateReportButton = $('#generateReportButton');

        // Add event listener for the button click
        generateReportButton.on('click', function () {
            // Get the table element
            const table = $('#dataTable');

            // Create an empty array to store the CSV rows
            const rows = [];

            // Add header row to the rows array
            const headerRow = ['Month', 'Expense', 'Revenue', 'Earning'];
            rows.push(headerRow.join(','));
            // Iterate through each table row
            table.find('tbody tr').each(function () {
                const rowData = [];

                // Iterate through each cell in the row
                $(this).find('td').each(function () {
                    // Push the cell's text content to the rowData array
                    rowData.push($(this).text().trim());
                });
                // Join the rowData array with commas to create a CSV row
                const csvRow = rowData.join(',');

                // Push the CSV row to the rows array
                rows.push(csvRow);
            });
            console.log(rows)

            // Join the rows array with line breaks to create the final CSV content
            const csvContent = rows.join('\n');

            // Create a download link for the CSV file
            const downloadLink = $('<a></a>', {
                href: 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContent),
                download: 'report.csv',
                style: 'display: none;'
            });

            // Add the download link to the document and click it to trigger the download
            $('body').append(downloadLink);
            downloadLink[0].click();
            downloadLink.remove();
        });
    };

    function number_format(number, decimals, dec_point, thousands_sep) {
        // *     example: number_format(1234.56, 2, ',', ' ');
        // *     return: '1 234,56'
        number = (number + '').replace(',', '').replace(' ', '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.round(n * k) / k;
            };
        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
    const lineChart = () => {
        const getMonth = <%- JSON.stringify(getMonth) %>;
        console.log(getMonth)
        const monthlyIncome = <%- JSON.stringify(monthlyIncome) %>;
        const ctx = $("#myLineChart");
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: getMonth,
                datasets: [{
                    label: "Earning",
                    data: monthlyIncome,
                    borderColor: 'rgb(59,109,204)',
                    lineTension: 0.3,
                    backgroundColor: "rgba(78, 115, 223, 0.05)",
                    pointRadius: 3,
                    pointBackgroundColor: "rgba(78, 115, 223, 1)",
                    pointBorderColor: "rgba(78, 115, 223, 1)",
                    pointHoverRadius: 3,
                    pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
                    pointHoverBorderColor: "rgba(78, 115, 223, 1)",
                    pointHitRadius: 10,
                    pointBorderWidth: 2,
                }]
            },
            options: {
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'date'
                        },
                        gridLines: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 7
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            // Include a dollar sign in the ticks
                            callback: function (value, index, values) {
                                return 'Rp ' + number_format(value);
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        }
                    }],
                },
            },
            legend: {
                display: false
            },
            tooltips: {
                backgroundColor: "rgb(255,255,255)",
                bodyFontColor: "#858796",
                titleMarginBottom: 10,
                titleFontColor: '#6e707e',
                titleFontSize: 14,
                borderColor: '#dddfeb',
                borderWidth: 1,
                xPadding: 15,
                yPadding: 15,
                displayColors: false,
                intersect: false,
                mode: 'index',
                caretPadding: 10,
                callbacks: {
                    label: function (tooltipItem, chart) {
                        var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                        return datasetLabel + ': Rp' + number_format(tooltipItem.yLabel);
                    }
                }
            }
        })
    }
    const doughnutChart = () => {
        const direct = '<%- direct %>'
        const customer = '<%- customer %>'
        const ctx = $("#myDoughnutChart")
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['customer', 'direct'],
                datasets: [{
                    data: [customer, direct],
                    backgroundColor: ["rgb(76,118,216)", "rgb(0,200,144)"]
                }]
            },
            options: {
                maintainAspectRatio: false,
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: false,
                    caretPadding: 10,
                },
                legend: {
                    display: false
                },
                cutoutPercentage: 80,
            }
        })
    };
</script>